{
"node": "d1001fea6e4c66b98bb4983df49c6e47d2db5ceb",
"date": [1575396389.0, -3600],
"desc": "Backed out changeset 3034ec8681ac (bug 1590745) for breaking local macOS 10.15 builds (bug 1600720). a=backout",
"backedoutby": "",
"branch": "default",
"bookmarks": [],
"tags": [],
"user": "Sebastian Hengst \u003carchaeopteryx@coole-files.de\u003e",
"parents": ["53cfede1065cc3eeb57bb1f2561ac830396e84c7"],
"files": [{
"file": "build/moz.configure/init.configure",
"status": "modified"
}, {
"file": "python/mach_commands.py",
"status": "modified"
}, {
"file": "python/mozbuild/mozbuild/mozconfig.py",
"status": "modified"
}, {
"file": "python/mozbuild/mozbuild/virtualenv.py",
"status": "modified"
}],
"diff": [{
"blockno": 1,
"lines": [{
"t": "-",
"n": 1,
"l": "--- a/build/moz.configure/init.configure\n"
}, {
"t": "+",
"n": 2,
"l": "+++ b/build/moz.configure/init.configure\n"
}, {
"t": "@",
"n": 3,
"l": "@@ -191,65 +191,49 @@ def mozconfig(mozconfig, old_configure, \n"
}, {
"t": "",
"n": 4,
"l": "     mozconfig = loader.read_mozconfig(mozconfig)\n"
}, {
"t": "",
"n": 5,
"l": " \n"
}, {
"t": "",
"n": 6,
"l": "     return mozconfig\n"
}, {
"t": "",
"n": 7,
"l": " \n"
}, {
"t": "",
"n": 8,
"l": " \n"
}, {
"t": "",
"n": 9,
"l": " set_config('MOZCONFIG', depends(mozconfig)(lambda m: m['path']))\n"
}, {
"t": "",
"n": 10,
"l": " \n"
}, {
"t": "",
"n": 11,
"l": " \n"
}, {
"t": "-",
"n": 12,
"l": "-# Python 2\n"
}, {
"t": "-",
"n": 13,
"l": "-# ========\n"
}, {
"t": "+",
"n": 14,
"l": "+option(env='PYTHON', nargs=1, help='Python interpreter')\n"
}, {
"t": "",
"n": 15,
"l": " \n"
}, {
"t": "-",
"n": 16,
"l": "-option(env='PYTHON', nargs=1, help='Python 2.7 interpreter')\n"
}, {
"t": "+",
"n": 17,
"l": "+# Setup python virtualenv\n"
}, {
"t": "+",
"n": 18,
"l": "+# ==============================================================\n"
}, {
"t": "",
"n": 19,
"l": " \n"
}, {
"t": "",
"n": 20,
"l": " \n"
}, {
"t": "",
"n": 21,
"l": " @depends('PYTHON', check_build_environment, mozconfig, '--help')\n"
}, {
"t": "",
"n": 22,
"l": " @imports('os')\n"
}, {
"t": "",
"n": 23,
"l": " @imports('sys')\n"
}, {
"t": "",
"n": 24,
"l": " @imports('subprocess')\n"
}, {
"t": "-",
"n": 25,
"l": "-@imports('distutils.sysconfig')\n"
}, {
"t": "",
"n": 26,
"l": " @imports(_from='mozbuild.configure.util', _import='LineIO')\n"
}, {
"t": "",
"n": 27,
"l": " @imports(_from='mozbuild.virtualenv', _import='VirtualenvManager')\n"
}, {
"t": "",
"n": 28,
"l": " @imports(_from='mozbuild.virtualenv', _import='verify_python_version')\n"
}, {
"t": "-",
"n": 29,
"l": "-@imports(_from='mozbuild.virtualenv', _import='PY2')\n"
}, {
"t": "-",
"n": 30,
"l": "-def virtualenv_python2(env_python, build_env, mozconfig, help):\n"
}, {
"t": "+",
"n": 31,
"l": "+@imports('distutils.sysconfig')\n"
}, {
"t": "+",
"n": 32,
"l": "+def virtualenv_python(env_python, build_env, mozconfig, help):\n"
}, {
"t": "",
"n": 33,
"l": "     if help:\n"
}, {
"t": "",
"n": 34,
"l": "         return\n"
}, {
"t": "",
"n": 35,
"l": " \n"
}, {
"t": "-",
"n": 36,
"l": "-    # NOTE: We cannot assume the Python we are calling this code with is the\n"
}, {
"t": "-",
"n": 37,
"l": "-    # Python we want to set up a virtualenv for.\n"
}, {
"t": "-",
"n": 38,
"l": "-    #\n"
}, {
"t": "-",
"n": 39,
"l": "-    # We also cannot assume that the Python the caller is configuring meets our\n"
}, {
"t": "-",
"n": 40,
"l": "-    # build requirements.\n"
}, {
"t": "-",
"n": 41,
"l": "-    #\n"
}, {
"t": "-",
"n": 42,
"l": "-    # Because of this the code is written to re-execute itself with the correct\n"
}, {
"t": "-",
"n": 43,
"l": "-    # interpreter if required.\n"
}, {
"t": "-",
"n": 44,
"l": "-\n"
}, {
"t": "-",
"n": 45,
"l": "-    log.debug(\"python2: running with pid %r\" % os.getpid())\n"
}, {
"t": "-",
"n": 46,
"l": "-    log.debug(\"python2: sys.executable: %r\" % sys.executable)\n"
}, {
"t": "-",
"n": 47,
"l": "-\n"
}, {
"t": "",
"n": 48,
"l": "     python = env_python[0] if env_python else None\n"
}, {
"t": "",
"n": 49,
"l": " \n"
}, {
"t": "-",
"n": 50,
"l": "-    # Did our python come from mozconfig? Overrides environment setting.\n"
}, {
"t": "",
"n": 51,
"l": "     # Ideally we'd rely on the mozconfig injection from mozconfig_options,\n"
}, {
"t": "",
"n": 52,
"l": "     # but we'd rather avoid the verbosity when we need to reexecute with\n"
}, {
"t": "",
"n": 53,
"l": "     # a different python.\n"
}, {
"t": "",
"n": 54,
"l": "     if mozconfig['path']:\n"
}, {
"t": "",
"n": 55,
"l": "         if 'PYTHON' in mozconfig['env']['added']:\n"
}, {
"t": "",
"n": 56,
"l": "             python = mozconfig['env']['added']['PYTHON']\n"
}, {
"t": "",
"n": 57,
"l": "         elif 'PYTHON' in mozconfig['env']['modified']:\n"
}, {
"t": "",
"n": 58,
"l": "             python = mozconfig['env']['modified']['PYTHON'][1]\n"
}, {
"t": "",
"n": 59,
"l": "         elif 'PYTHON' in mozconfig['vars']['added']:\n"
}, {
"t": "",
"n": 60,
"l": "             python = mozconfig['vars']['added']['PYTHON']\n"
}, {
"t": "",
"n": 61,
"l": "         elif 'PYTHON' in mozconfig['vars']['modified']:\n"
}, {
"t": "",
"n": 62,
"l": "             python = mozconfig['vars']['modified']['PYTHON'][1]\n"
}, {
"t": "",
"n": 63,
"l": " \n"
}, {
"t": "-",
"n": 64,
"l": "-    log.debug(\"python2: executable from configuration: %r\" % python)\n"
}, {
"t": "-",
"n": 65,
"l": "-\n"
}, {
"t": "",
"n": 66,
"l": "     with LineIO(lambda l: log.error(l)) as out:\n"
}, {
"t": "",
"n": 67,
"l": "         verify_python_version(out)\n"
}, {
"t": "",
"n": 68,
"l": "     topsrcdir, topobjdir = build_env.topsrcdir, build_env.topobjdir\n"
}, {
"t": "",
"n": 69,
"l": "     if topobjdir.endswith('/js/src'):\n"
}, {
"t": "",
"n": 70,
"l": "         topobjdir = topobjdir[:-7]\n"
}, {
"t": "",
"n": 71,
"l": " \n"
}, {
"t": "",
"n": 72,
"l": "     virtualenvs_root = os.path.join(topobjdir, '_virtualenvs')\n"
}, {
"t": "",
"n": 73,
"l": "     with LineIO(lambda l: log.info(l), 'replace') as out:\n"
}, {
"t": "@",
"n": 74,
"l": "@@ -267,52 +251,39 @@ def virtualenv_python2(env_python, build\n"
}, {
"t": "",
"n": 75,
"l": "         found_python = find_program(python)\n"
}, {
"t": "",
"n": 76,
"l": "         if not found_python:\n"
}, {
"t": "",
"n": 77,
"l": "             die('The PYTHON environment variable does not contain '\n"
}, {
"t": "",
"n": 78,
"l": "                 'a valid path. Cannot find %s', python)\n"
}, {
"t": "",
"n": 79,
"l": "         python = found_python\n"
}, {
"t": "",
"n": 80,
"l": "     else:\n"
}, {
"t": "",
"n": 81,
"l": "         python = sys.executable\n"
}, {
"t": "",
"n": 82,
"l": " \n"
}, {
"t": "-",
"n": 83,
"l": "-    log.debug(\"python2: found executable: %r\" % python)\n"
}, {
"t": "-",
"n": 84,
"l": "-\n"
}, {
"t": "",
"n": 85,
"l": "     if not manager.up_to_date(python):\n"
}, {
"t": "-",
"n": 86,
"l": "-        log.info('Creating Python 2 environment')\n"
}, {
"t": "+",
"n": 87,
"l": "+        log.info('Creating Python environment')\n"
}, {
"t": "",
"n": 88,
"l": "         manager.build(python)\n"
}, {
"t": "-",
"n": 89,
"l": "-    else:\n"
}, {
"t": "-",
"n": 90,
"l": "-        log.debug(\"python2: venv is up to date\")\n"
}, {
"t": "",
"n": 91,
"l": " \n"
}, {
"t": "",
"n": 92,
"l": "     python = normsep(manager.python_path)\n"
}, {
"t": "",
"n": 93,
"l": " \n"
}, {
"t": "-",
"n": 94,
"l": "-    # The currently running interpreter could be Python 2 or Python 3. We make the\n"
}, {
"t": "-",
"n": 95,
"l": "-    # part of the code that re-executes everything with the virtualenv's Python\n"
}, {
"t": "-",
"n": 96,
"l": "-    # conditional on running the same major version as the current interpreter. If we\n"
}, {
"t": "-",
"n": 97,
"l": "-    # don't do this then the configure code for the Py 2 and Py 3 virtualenvs could\n"
}, {
"t": "-",
"n": 98,
"l": "-    # activate each other from inside the other's virtualenv.  We can't guarantee\n"
}, {
"t": "-",
"n": 99,
"l": "-    # how the virtualenvs would interact if that happens.\n"
}, {
"t": "-",
"n": 100,
"l": "-    if PY2:\n"
}, {
"t": "-",
"n": 101,
"l": "-        if not normsep(sys.executable).startswith(normsep(virtualenvs_root)):\n"
}, {
"t": "-",
"n": 102,
"l": "-            log.debug(\"python2: executing as %s, should be running as %s\" % (\n"
}, {
"t": "-",
"n": 103,
"l": "-                sys.executable, manager.python_path))\n"
}, {
"t": "-",
"n": 104,
"l": "-            log.info('Reexecuting in the virtualenv')\n"
}, {
"t": "-",
"n": 105,
"l": "-            if env_python:\n"
}, {
"t": "-",
"n": 106,
"l": "-                del os.environ['PYTHON']\n"
}, {
"t": "-",
"n": 107,
"l": "-            # One would prefer to use os.execl, but that's completely borked on\n"
}, {
"t": "-",
"n": 108,
"l": "-            # Windows.\n"
}, {
"t": "-",
"n": 109,
"l": "-            sys.exit(subprocess.call([python] + sys.argv))\n"
}, {
"t": "+",
"n": 110,
"l": "+    if not normsep(sys.executable).startswith(normsep(virtualenvs_root)):\n"
}, {
"t": "+",
"n": 111,
"l": "+        log.info('Reexecuting in the virtualenv')\n"
}, {
"t": "+",
"n": 112,
"l": "+        if env_python:\n"
}, {
"t": "+",
"n": 113,
"l": "+            del os.environ['PYTHON']\n"
}, {
"t": "+",
"n": 114,
"l": "+        # One would prefer to use os.execl, but that's completely borked on\n"
}, {
"t": "+",
"n": 115,
"l": "+        # Windows.\n"
}, {
"t": "+",
"n": 116,
"l": "+        sys.exit(subprocess.call([python] + sys.argv))\n"
}, {
"t": "",
"n": 117,
"l": " \n"
}, {
"t": "-",
"n": 118,
"l": "-        # We are now in the virtualenv\n"
}, {
"t": "-",
"n": 119,
"l": "-        if not distutils.sysconfig.get_python_lib():\n"
}, {
"t": "-",
"n": 120,
"l": "-            die('Could not determine python site packages directory')\n"
}, {
"t": "+",
"n": 121,
"l": "+    # We are now in the virtualenv\n"
}, {
"t": "+",
"n": 122,
"l": "+    if not distutils.sysconfig.get_python_lib():\n"
}, {
"t": "+",
"n": 123,
"l": "+        die('Could not determine python site packages directory')\n"
}, {
"t": "",
"n": 124,
"l": " \n"
}, {
"t": "",
"n": 125,
"l": "     return python\n"
}, {
"t": "",
"n": 126,
"l": " \n"
}, {
"t": "",
"n": 127,
"l": " \n"
}, {
"t": "-",
"n": 128,
"l": "-set_config('PYTHON', virtualenv_python2)\n"
}, {
"t": "-",
"n": 129,
"l": "-add_old_configure_assignment('PYTHON', virtualenv_python2)\n"
}, {
"t": "+",
"n": 130,
"l": "+set_config('PYTHON', virtualenv_python)\n"
}, {
"t": "+",
"n": 131,
"l": "+add_old_configure_assignment('PYTHON', virtualenv_python)\n"
}, {
"t": "",
"n": 132,
"l": " \n"
}, {
"t": "",
"n": 133,
"l": " # Inject mozconfig options\n"
}, {
"t": "",
"n": 134,
"l": " # ==============================================================\n"
}, {
"t": "",
"n": 135,
"l": " # All options defined above this point can't be injected in mozconfig_options\n"
}, {
"t": "",
"n": 136,
"l": " # below, so collect them.\n"
}, {
"t": "",
"n": 137,
"l": " \n"
}, {
"t": "",
"n": 138,
"l": " \n"
}, {
"t": "",
"n": 139,
"l": " @template\n"
}, {
"t": "@",
"n": 140,
"l": "@@ -410,81 +381,26 @@ shell = help_shell | shell\n"
}, {
"t": "",
"n": 141,
"l": " \n"
}, {
"t": "",
"n": 142,
"l": " \n"
}, {
"t": "",
"n": 143,
"l": " # Python 3\n"
}, {
"t": "",
"n": 144,
"l": " # ========\n"
}, {
"t": "",
"n": 145,
"l": " \n"
}, {
"t": "",
"n": 146,
"l": " option(env='PYTHON3', nargs=1, help='Python 3 interpreter (3.5 or later)')\n"
}, {
"t": "",
"n": 147,
"l": " \n"
}, {
"t": "",
"n": 148,
"l": " \n"
}, {
"t": "-",
"n": 149,
"l": "-@depends(\n"
}, {
"t": "-",
"n": 150,
"l": "-    'PYTHON3', check_build_environment, 'MOZILLABUILD', mozconfig, '--help')\n"
}, {
"t": "+",
"n": 151,
"l": "+@depends('PYTHON3', 'MOZILLABUILD')\n"
}, {
"t": "",
"n": 152,
"l": " @checking('for Python 3',\n"
}, {
"t": "",
"n": 153,
"l": "           callback=lambda x: '%s (%s)' % (x.path, x.str_version) if x else 'no')\n"
}, {
"t": "",
"n": 154,
"l": " @imports(_from='__builtin__', _import='Exception')\n"
}, {
"t": "-",
"n": 155,
"l": "-@imports('os')\n"
}, {
"t": "-",
"n": 156,
"l": "-@imports('sys')\n"
}, {
"t": "-",
"n": 157,
"l": "-@imports('subprocess')\n"
}, {
"t": "-",
"n": 158,
"l": "-@imports('distutils.sysconfig')\n"
}, {
"t": "-",
"n": 159,
"l": "-@imports(_from='mozbuild.configure.util', _import='LineIO')\n"
}, {
"t": "-",
"n": 160,
"l": "-@imports(_from='mozbuild.virtualenv', _import='VirtualenvManager')\n"
}, {
"t": "-",
"n": 161,
"l": "-@imports(_from='mozbuild.virtualenv', _import='verify_python_version')\n"
}, {
"t": "-",
"n": 162,
"l": "-@imports(_from='mozbuild.virtualenv', _import='PY3')\n"
}, {
"t": "",
"n": 163,
"l": " @imports(_from='mozbuild.pythonutil', _import='find_python3_executable')\n"
}, {
"t": "",
"n": 164,
"l": " @imports(_from='mozbuild.pythonutil', _import='python_executable_version')\n"
}, {
"t": "-",
"n": 165,
"l": "-def virtualenv_python3(env_python, build_env, mozillabuild, mozconfig, help):\n"
}, {
"t": "-",
"n": 166,
"l": "-    if help:\n"
}, {
"t": "-",
"n": 167,
"l": "-        return\n"
}, {
"t": "-",
"n": 168,
"l": "-\n"
}, {
"t": "-",
"n": 169,
"l": "-    # NOTE: We cannot assume the Python we are calling this code with is the\n"
}, {
"t": "-",
"n": 170,
"l": "-    # Python we want to set up a virtualenv for.\n"
}, {
"t": "-",
"n": 171,
"l": "-    #\n"
}, {
"t": "-",
"n": 172,
"l": "-    # We also cannot assume that the Python the caller is configuring meets our\n"
}, {
"t": "-",
"n": 173,
"l": "-    # build requirements.\n"
}, {
"t": "-",
"n": 174,
"l": "-    #\n"
}, {
"t": "-",
"n": 175,
"l": "-    # Because of this the code is written to re-execute itself with the correct\n"
}, {
"t": "-",
"n": 176,
"l": "-    # interpreter if required.\n"
}, {
"t": "-",
"n": 177,
"l": "-\n"
}, {
"t": "-",
"n": 178,
"l": "-    log.debug(\"python3: running with pid %r\" % os.getpid())\n"
}, {
"t": "-",
"n": 179,
"l": "-    log.debug(\"python3: sys.executable: %r\" % sys.executable)\n"
}, {
"t": "-",
"n": 180,
"l": "-\n"
}, {
"t": "-",
"n": 181,
"l": "-    # Verify that the Python version we executed this code with is the minimum\n"
}, {
"t": "-",
"n": 182,
"l": "-    # required version to handle all project code.\n"
}, {
"t": "-",
"n": 183,
"l": "-    with LineIO(lambda l: log.error(l)) as out:\n"
}, {
"t": "-",
"n": 184,
"l": "-        verify_python_version(out)\n"
}, {
"t": "-",
"n": 185,
"l": "-\n"
}, {
"t": "+",
"n": 186,
"l": "+def python3(env_python, mozillabuild):\n"
}, {
"t": "",
"n": 187,
"l": "     python = env_python[0] if env_python else None\n"
}, {
"t": "",
"n": 188,
"l": " \n"
}, {
"t": "-",
"n": 189,
"l": "-    # Ideally we'd rely on the mozconfig injection from mozconfig_options,\n"
}, {
"t": "-",
"n": 190,
"l": "-    # but we'd rather avoid the verbosity when we need to reexecute with\n"
}, {
"t": "-",
"n": 191,
"l": "-    # a different python.\n"
}, {
"t": "-",
"n": 192,
"l": "-    if mozconfig['path']:\n"
}, {
"t": "-",
"n": 193,
"l": "-        if 'PYTHON3' in mozconfig['env']['added']:\n"
}, {
"t": "-",
"n": 194,
"l": "-            python = mozconfig['env']['added']['PYTHON3']\n"
}, {
"t": "-",
"n": 195,
"l": "-        elif 'PYTHON3' in mozconfig['env']['modified']:\n"
}, {
"t": "-",
"n": 196,
"l": "-            python = mozconfig['env']['modified']['PYTHON3'][1]\n"
}, {
"t": "-",
"n": 197,
"l": "-        elif 'PYTHON3' in mozconfig['vars']['added']:\n"
}, {
"t": "-",
"n": 198,
"l": "-            python = mozconfig['vars']['added']['PYTHON3']\n"
}, {
"t": "-",
"n": 199,
"l": "-        elif 'PYTHON3' in mozconfig['vars']['modified']:\n"
}, {
"t": "-",
"n": 200,
"l": "-            python = mozconfig['vars']['modified']['PYTHON3'][1]\n"
}, {
"t": "-",
"n": 201,
"l": "-\n"
}, {
"t": "-",
"n": 202,
"l": "-    log.debug(\"python3: executable from configuration: %r\" % python)\n"
}, {
"t": "-",
"n": 203,
"l": "-\n"
}, {
"t": "-",
"n": 204,
"l": "-    # If this is a mozilla-central build, we'll find the virtualenv in the top\n"
}, {
"t": "-",
"n": 205,
"l": "-    # source directory. If this is a SpiderMonkey build, we assume we're at\n"
}, {
"t": "-",
"n": 206,
"l": "-    # js/src and try to find the virtualenv from the mozilla-central root.\n"
}, {
"t": "-",
"n": 207,
"l": "-    # See mozilla-central changeset d2cce982a7c809815d86d5daecefe2e7a563ecca\n"
}, {
"t": "-",
"n": 208,
"l": "-    # Bug 784841\n"
}, {
"t": "-",
"n": 209,
"l": "-    topsrcdir, topobjdir = build_env.topsrcdir, build_env.topobjdir\n"
}, {
"t": "-",
"n": 210,
"l": "-    if topobjdir.endswith('/js/src'):\n"
}, {
"t": "-",
"n": 211,
"l": "-        topobjdir = topobjdir[:-7]\n"
}, {
"t": "-",
"n": 212,
"l": "-\n"
}, {
"t": "-",
"n": 213,
"l": "-    # If we know the Python executable the caller is asking for then verify its\n"
}, {
"t": "-",
"n": 214,
"l": "-    # version. If the caller did not ask for a specific executable then find\n"
}, {
"t": "-",
"n": 215,
"l": "-    # a reasonable default.\n"
}, {
"t": "+",
"n": 216,
"l": "+    # If Python given by environment variable, it must work.\n"
}, {
"t": "",
"n": 217,
"l": "     if python:\n"
}, {
"t": "",
"n": 218,
"l": "         try:\n"
}, {
"t": "",
"n": 219,
"l": "             version = python_executable_version(python).version\n"
}, {
"t": "",
"n": 220,
"l": "         except Exception as e:\n"
}, {
"t": "",
"n": 221,
"l": "             raise FatalCheckError('could not determine version of PYTHON '\n"
}, {
"t": "",
"n": 222,
"l": "                                   '(%s): %s' % (python, e))\n"
}, {
"t": "",
"n": 223,
"l": "     elif mozillabuild:\n"
}, {
"t": "",
"n": 224,
"l": "         # MozillaBuild provides a Python 3.\n"
}, {
"t": "@",
"n": 225,
"l": "@@ -509,70 +425,25 @@ def virtualenv_python3(env_python, build\n"
}, {
"t": "",
"n": 226,
"l": "                               'PATH or define PYTHON3 to point to a Python '\n"
}, {
"t": "",
"n": 227,
"l": "                               '3.5 executable.')\n"
}, {
"t": "",
"n": 228,
"l": " \n"
}, {
"t": "",
"n": 229,
"l": "     if version \u003c (3, 5, 0):\n"
}, {
"t": "",
"n": 230,
"l": "         raise FatalCheckError('Python 3.5 or newer is required to build; '\n"
}, {
"t": "",
"n": 231,
"l": "                               '%s is Python %d.%d' % (python, version[0],\n"
}, {
"t": "",
"n": 232,
"l": "                                                       version[1]))\n"
}, {
"t": "",
"n": 233,
"l": " \n"
}, {
"t": "-",
"n": 234,
"l": "-    log.debug(\"python3: found executable: %r\" % python)\n"
}, {
"t": "-",
"n": 235,
"l": "-\n"
}, {
"t": "-",
"n": 236,
"l": "-    virtualenvs_root = os.path.join(topobjdir, '_virtualenvs')\n"
}, {
"t": "-",
"n": 237,
"l": "-    with LineIO(lambda l: log.info(l), 'replace') as out:\n"
}, {
"t": "-",
"n": 238,
"l": "-        manager = VirtualenvManager(\n"
}, {
"t": "-",
"n": 239,
"l": "-            topsrcdir, topobjdir,\n"
}, {
"t": "-",
"n": 240,
"l": "-            os.path.join(virtualenvs_root, 'init_py3'), out,\n"
}, {
"t": "-",
"n": 241,
"l": "-            os.path.join(topsrcdir, 'build', 'virtualenv_packages.txt'))\n"
}, {
"t": "-",
"n": 242,
"l": "-\n"
}, {
"t": "-",
"n": 243,
"l": "-    log.debug(\"python3: using venv: %r\" % manager.virtualenv_root)\n"
}, {
"t": "-",
"n": 244,
"l": "-\n"
}, {
"t": "-",
"n": 245,
"l": "-    if not manager.up_to_date(python):\n"
}, {
"t": "-",
"n": 246,
"l": "-        log.info('Creating Python 3 environment')\n"
}, {
"t": "-",
"n": 247,
"l": "-        manager.build(python)\n"
}, {
"t": "-",
"n": 248,
"l": "-    else:\n"
}, {
"t": "-",
"n": 249,
"l": "-        log.debug(\"python3: venv is up to date\")\n"
}, {
"t": "-",
"n": 250,
"l": "-\n"
}, {
"t": "-",
"n": 251,
"l": "-    python = normsep(manager.python_path)\n"
}, {
"t": "-",
"n": 252,
"l": "-\n"
}, {
"t": "-",
"n": 253,
"l": "-    # The currently running interpreter could be Python 2 or Python 3. We make the\n"
}, {
"t": "-",
"n": 254,
"l": "-    # part of the code that re-executes everything with the virtualenv's Python\n"
}, {
"t": "-",
"n": 255,
"l": "-    # conditional on running the same major version as the current interpreter. If we\n"
}, {
"t": "-",
"n": 256,
"l": "-    # don't do this then the configure code for the Py 2 and Py 3 virtualenvs could\n"
}, {
"t": "-",
"n": 257,
"l": "-    # activate each other from inside the other's virtualenv.  We can't guarantee\n"
}, {
"t": "-",
"n": 258,
"l": "-    # how the virtualenvs would interact if that happens.\n"
}, {
"t": "-",
"n": 259,
"l": "-    if PY3:\n"
}, {
"t": "-",
"n": 260,
"l": "-        if not normsep(sys.executable).startswith(normsep(virtualenvs_root)):\n"
}, {
"t": "-",
"n": 261,
"l": "-            log.debug(\"python3: executing as %s, should be running as %s\" % (\n"
}, {
"t": "-",
"n": 262,
"l": "-                sys.executable, manager.python_path))\n"
}, {
"t": "-",
"n": 263,
"l": "-            log.info('Re-executing in the virtualenv')\n"
}, {
"t": "-",
"n": 264,
"l": "-            if env_python:\n"
}, {
"t": "-",
"n": 265,
"l": "-                del os.environ['PYTHON3']\n"
}, {
"t": "-",
"n": 266,
"l": "-            # One would prefer to use os.execl, but that's completely borked on\n"
}, {
"t": "-",
"n": 267,
"l": "-            # Windows.\n"
}, {
"t": "-",
"n": 268,
"l": "-            sys.exit(subprocess.call([python] + sys.argv))\n"
}, {
"t": "-",
"n": 269,
"l": "-\n"
}, {
"t": "-",
"n": 270,
"l": "-        # We are now in the virtualenv\n"
}, {
"t": "-",
"n": 271,
"l": "-        if not distutils.sysconfig.get_python_lib():\n"
}, {
"t": "-",
"n": 272,
"l": "-            die('Could not determine python site packages directory')\n"
}, {
"t": "-",
"n": 273,
"l": "-\n"
}, {
"t": "-",
"n": 274,
"l": "-    str_version = '.'.join(str(v) for v in version)\n"
}, {
"t": "-",
"n": 275,
"l": "-\n"
}, {
"t": "",
"n": 276,
"l": "     return namespace(\n"
}, {
"t": "",
"n": 277,
"l": "         path=python,\n"
}, {
"t": "",
"n": 278,
"l": "         version=version,\n"
}, {
"t": "-",
"n": 279,
"l": "-        str_version=str_version,\n"
}, {
"t": "+",
"n": 280,
"l": "+        str_version='.'.join(str(v) for v in version),\n"
}, {
"t": "",
"n": 281,
"l": "     )\n"
}, {
"t": "",
"n": 282,
"l": " \n"
}, {
"t": "",
"n": 283,
"l": " \n"
}, {
"t": "-",
"n": 284,
"l": "-set_config('PYTHON3', depends(virtualenv_python3)(lambda p: p.path))\n"
}, {
"t": "-",
"n": 285,
"l": "-set_config(\n"
}, {
"t": "-",
"n": 286,
"l": "-    'PYTHON3_VERSION',\n"
}, {
"t": "-",
"n": 287,
"l": "-    depends(virtualenv_python3)(lambda p: p.str_version))\n"
}, {
"t": "-",
"n": 288,
"l": "-\n"
}, {
"t": "+",
"n": 289,
"l": "+set_config('PYTHON3', depends_if(python3)(lambda p: p.path))\n"
}, {
"t": "+",
"n": 290,
"l": "+set_config('PYTHON3_VERSION', depends_if(python3)(lambda p: p.str_version))\n"
}, {
"t": "",
"n": 291,
"l": " \n"
}, {
"t": "",
"n": 292,
"l": " # Source checkout and version control integration.\n"
}, {
"t": "",
"n": 293,
"l": " # ================================================\n"
}, {
"t": "",
"n": 294,
"l": " \n"
}, {
"t": "",
"n": 295,
"l": " \n"
}, {
"t": "",
"n": 296,
"l": " @depends(check_build_environment, 'MOZ_AUTOMATION', '--help')\n"
}, {
"t": "",
"n": 297,
"l": " @checking('for vcs source checkout')\n"
}, {
"t": "",
"n": 298,
"l": " @imports('os')\n"
}]
}, {
"blockno": 2,
"lines": [{
"t": "-",
"n": 1,
"l": "--- a/python/mach_commands.py\n"
}, {
"t": "+",
"n": 2,
"l": "+++ b/python/mach_commands.py\n"
}, {
"t": "@",
"n": 3,
"l": "@@ -20,17 +20,16 @@ from concurrent.futures import (\n"
}, {
"t": "",
"n": 4,
"l": " import mozinfo\n"
}, {
"t": "",
"n": 5,
"l": " from mozfile import which\n"
}, {
"t": "",
"n": 6,
"l": " from manifestparser import TestManifest\n"
}, {
"t": "",
"n": 7,
"l": " from manifestparser import filters as mpf\n"
}, {
"t": "",
"n": 8,
"l": " \n"
}, {
"t": "",
"n": 9,
"l": " from mozbuild.base import (\n"
}, {
"t": "",
"n": 10,
"l": "     MachCommandBase,\n"
}, {
"t": "",
"n": 11,
"l": " )\n"
}, {
"t": "-",
"n": 12,
"l": "-from mozbuild.virtualenv import VirtualenvManager\n"
}, {
"t": "",
"n": 13,
"l": " \n"
}, {
"t": "",
"n": 14,
"l": " from mach.decorators import (\n"
}, {
"t": "",
"n": 15,
"l": "     CommandArgument,\n"
}, {
"t": "",
"n": 16,
"l": "     CommandProvider,\n"
}, {
"t": "",
"n": 17,
"l": "     Command,\n"
}, {
"t": "",
"n": 18,
"l": " )\n"
}, {
"t": "",
"n": 19,
"l": " \n"
}, {
"t": "",
"n": 20,
"l": " here = os.path.abspath(os.path.dirname(__file__))\n"
}, {
"t": "@",
"n": 21,
"l": "@@ -134,17 +133,18 @@ class MachCommands(MachCommandBase):\n"
}, {
"t": "",
"n": 22,
"l": "                          test_objects=None,\n"
}, {
"t": "",
"n": 23,
"l": "                          subsuite=None,\n"
}, {
"t": "",
"n": 24,
"l": "                          verbose=False,\n"
}, {
"t": "",
"n": 25,
"l": "                          jobs=None,\n"
}, {
"t": "",
"n": 26,
"l": "                          python=None,\n"
}, {
"t": "",
"n": 27,
"l": "                          exitfirst=False,\n"
}, {
"t": "",
"n": 28,
"l": "                          extra=None,\n"
}, {
"t": "",
"n": 29,
"l": "                          **kwargs):\n"
}, {
"t": "-",
"n": 30,
"l": "-        self._activate_test_virtualenvs(python)\n"
}, {
"t": "+",
"n": 31,
"l": "+        python = python or self.virtualenv_manager.python_path\n"
}, {
"t": "+",
"n": 32,
"l": "+        self.activate_pipenv(pipfile=None, populate=True, python=python)\n"
}, {
"t": "",
"n": 33,
"l": " \n"
}, {
"t": "",
"n": 34,
"l": "         if test_objects is None:\n"
}, {
"t": "",
"n": 35,
"l": "             from moztest.resolve import TestResolver\n"
}, {
"t": "",
"n": 36,
"l": "             resolver = self._spawn(TestResolver)\n"
}, {
"t": "",
"n": 37,
"l": "             # If we were given test paths, try to find tests matching them.\n"
}, {
"t": "",
"n": 38,
"l": "             test_objects = resolver.resolve_tests(paths=tests, flavor='python')\n"
}, {
"t": "",
"n": 39,
"l": "         else:\n"
}, {
"t": "",
"n": 40,
"l": "             # We've received test_objects from |mach test|. We need to ignore\n"
}, {
"t": "@",
"n": 41,
"l": "@@ -226,48 +226,16 @@ class MachCommands(MachCommandBase):\n"
}, {
"t": "",
"n": 42,
"l": "             return_code = on_test_finished(self._run_python_test(test))\n"
}, {
"t": "",
"n": 43,
"l": "             if return_code and exitfirst:\n"
}, {
"t": "",
"n": 44,
"l": "                 break\n"
}, {
"t": "",
"n": 45,
"l": " \n"
}, {
"t": "",
"n": 46,
"l": "         self.log(logging.INFO, 'python-test', {'return_code': return_code},\n"
}, {
"t": "",
"n": 47,
"l": "                  'Return code from mach python-test: {return_code}')\n"
}, {
"t": "",
"n": 48,
"l": "         return return_code\n"
}, {
"t": "",
"n": 49,
"l": " \n"
}, {
"t": "-",
"n": 50,
"l": "-    def _activate_test_virtualenvs(self, python):\n"
}, {
"t": "-",
"n": 51,
"l": "-        \"\"\"Make sure the test suite virtualenvs are set up and activated.\n"
}, {
"t": "-",
"n": 52,
"l": "-\n"
}, {
"t": "-",
"n": 53,
"l": "-        Args:\n"
}, {
"t": "-",
"n": 54,
"l": "-            python: Optional python version string we want to run the suite with.\n"
}, {
"t": "-",
"n": 55,
"l": "-                See the `--python` argument to the `mach python-test` command.\n"
}, {
"t": "-",
"n": 56,
"l": "-        \"\"\"\n"
}, {
"t": "-",
"n": 57,
"l": "-        from mozbuild.pythonutil import find_python3_executable\n"
}, {
"t": "-",
"n": 58,
"l": "-\n"
}, {
"t": "-",
"n": 59,
"l": "-        default_manager = self.virtualenv_manager\n"
}, {
"t": "-",
"n": 60,
"l": "-\n"
}, {
"t": "-",
"n": 61,
"l": "-        # Grab the default virtualenv properties before we activate other virtualenvs.\n"
}, {
"t": "-",
"n": 62,
"l": "-        python = python or default_manager.python_path\n"
}, {
"t": "-",
"n": 63,
"l": "-        py3_root = default_manager.virtualenv_root + '_py3'\n"
}, {
"t": "-",
"n": 64,
"l": "-\n"
}, {
"t": "-",
"n": 65,
"l": "-        self.activate_pipenv(pipfile=None, populate=True, python=python)\n"
}, {
"t": "-",
"n": 66,
"l": "-\n"
}, {
"t": "-",
"n": 67,
"l": "-        # The current process might be running under Python 2 and the Python 3\n"
}, {
"t": "-",
"n": 68,
"l": "-        # virtualenv will not be set up by mach bootstrap. To avoid problems in tests\n"
}, {
"t": "-",
"n": 69,
"l": "-        # that implicitly depend on the Python 3 virtualenv we ensure the Python 3\n"
}, {
"t": "-",
"n": 70,
"l": "-        # virtualenv is up to date before the tests start.\n"
}, {
"t": "-",
"n": 71,
"l": "-        python3, version = find_python3_executable(min_version='3.5.0')\n"
}, {
"t": "-",
"n": 72,
"l": "-\n"
}, {
"t": "-",
"n": 73,
"l": "-        py3_manager = VirtualenvManager(\n"
}, {
"t": "-",
"n": 74,
"l": "-            default_manager.topsrcdir,\n"
}, {
"t": "-",
"n": 75,
"l": "-            default_manager.topobjdir,\n"
}, {
"t": "-",
"n": 76,
"l": "-            py3_root,\n"
}, {
"t": "-",
"n": 77,
"l": "-            default_manager.log_handle,\n"
}, {
"t": "-",
"n": 78,
"l": "-            default_manager.manifest_path,\n"
}, {
"t": "-",
"n": 79,
"l": "-        )\n"
}, {
"t": "-",
"n": 80,
"l": "-        py3_manager.ensure(python3)\n"
}, {
"t": "-",
"n": 81,
"l": "-\n"
}, {
"t": "",
"n": 82,
"l": "     def _run_python_test(self, test):\n"
}, {
"t": "",
"n": 83,
"l": "         from mozprocess import ProcessHandler\n"
}, {
"t": "",
"n": 84,
"l": " \n"
}, {
"t": "",
"n": 85,
"l": "         if test.get('requirements'):\n"
}, {
"t": "",
"n": 86,
"l": "             self.virtualenv_manager.install_pip_requirements(test['requirements'], quiet=True)\n"
}, {
"t": "",
"n": 87,
"l": " \n"
}, {
"t": "",
"n": 88,
"l": "         output = []\n"
}, {
"t": "",
"n": 89,
"l": " \n"
}]
}, {
"blockno": 3,
"lines": [{
"t": "-",
"n": 1,
"l": "--- a/python/mozbuild/mozbuild/mozconfig.py\n"
}, {
"t": "+",
"n": 2,
"l": "+++ b/python/mozbuild/mozbuild/mozconfig.py\n"
}, {
"t": "@",
"n": 3,
"l": "@@ -8,17 +8,18 @@ import filecmp\n"
}, {
"t": "",
"n": 4,
"l": " import os\n"
}, {
"t": "",
"n": 5,
"l": " import re\n"
}, {
"t": "",
"n": 6,
"l": " import sys\n"
}, {
"t": "",
"n": 7,
"l": " import subprocess\n"
}, {
"t": "",
"n": 8,
"l": " import traceback\n"
}, {
"t": "",
"n": 9,
"l": " from textwrap import dedent\n"
}, {
"t": "",
"n": 10,
"l": " \n"
}, {
"t": "",
"n": 11,
"l": " from mozpack import path as mozpath\n"
}, {
"t": "-",
"n": 12,
"l": "-from mozbuild.util import system_encoding, ensure_subprocess_env\n"
}, {
"t": "+",
"n": 13,
"l": "+from mozbuild.util import system_encoding\n"
}, {
"t": "+",
"n": 14,
"l": "+\n"
}, {
"t": "",
"n": 15,
"l": " \n"
}, {
"t": "",
"n": 16,
"l": " MOZ_MYCONFIG_ERROR = '''\n"
}, {
"t": "",
"n": 17,
"l": " The MOZ_MYCONFIG environment variable to define the location of mozconfigs\n"
}, {
"t": "",
"n": 18,
"l": " is deprecated. If you wish to define the mozconfig path via an environment\n"
}, {
"t": "",
"n": 19,
"l": " variable, use MOZCONFIG instead.\n"
}, {
"t": "",
"n": 20,
"l": " '''.strip()\n"
}, {
"t": "",
"n": 21,
"l": " \n"
}, {
"t": "",
"n": 22,
"l": " MOZCONFIG_LEGACY_PATH = '''\n"
}, {
"t": "@",
"n": 23,
"l": "@@ -232,16 +233,18 @@ class MozconfigLoader(object):\n"
}, {
"t": "",
"n": 24,
"l": "             return result\n"
}, {
"t": "",
"n": 25,
"l": " \n"
}, {
"t": "",
"n": 26,
"l": "         path = mozpath.normsep(path)\n"
}, {
"t": "",
"n": 27,
"l": " \n"
}, {
"t": "",
"n": 28,
"l": "         result['configure_args'] = []\n"
}, {
"t": "",
"n": 29,
"l": "         result['make_extra'] = []\n"
}, {
"t": "",
"n": 30,
"l": "         result['make_flags'] = []\n"
}, {
"t": "",
"n": 31,
"l": " \n"
}, {
"t": "+",
"n": 32,
"l": "+        env = dict(os.environ)\n"
}, {
"t": "+",
"n": 33,
"l": "+\n"
}, {
"t": "",
"n": 34,
"l": "         # Since mozconfig_loader is a shell script, running it \"normally\"\n"
}, {
"t": "",
"n": 35,
"l": "         # actually leads to two shell executions on Windows. Avoid this by\n"
}, {
"t": "",
"n": 36,
"l": "         # directly calling sh mozconfig_loader.\n"
}, {
"t": "",
"n": 37,
"l": "         shell = 'sh'\n"
}, {
"t": "",
"n": 38,
"l": "         if 'MOZILLABUILD' in os.environ:\n"
}, {
"t": "",
"n": 39,
"l": "             shell = os.environ['MOZILLABUILD'] + '/msys/bin/sh'\n"
}, {
"t": "",
"n": 40,
"l": "         if sys.platform == 'win32':\n"
}, {
"t": "",
"n": 41,
"l": "             shell = shell + '.exe'\n"
}, {
"t": "@",
"n": 42,
"l": "@@ -250,18 +253,17 @@ class MozconfigLoader(object):\n"
}, {
"t": "",
"n": 43,
"l": "                    mozpath.normsep(self.topsrcdir), path, sys.executable,\n"
}, {
"t": "",
"n": 44,
"l": "                    mozpath.join(mozpath.dirname(self._loader_script),\n"
}, {
"t": "",
"n": 45,
"l": "                                 'action', 'dump_env.py')]\n"
}, {
"t": "",
"n": 46,
"l": " \n"
}, {
"t": "",
"n": 47,
"l": "         try:\n"
}, {
"t": "",
"n": 48,
"l": "             # We need to capture stderr because that's where the shell sends\n"
}, {
"t": "",
"n": 49,
"l": "             # errors if execution fails.\n"
}, {
"t": "",
"n": 50,
"l": "             output = subprocess.check_output(command, stderr=subprocess.STDOUT,\n"
}, {
"t": "-",
"n": 51,
"l": "-                                             cwd=self.topsrcdir,\n"
}, {
"t": "-",
"n": 52,
"l": "-                                             env=ensure_subprocess_env(os.environ))\n"
}, {
"t": "+",
"n": 53,
"l": "+                                             cwd=self.topsrcdir, env=env)\n"
}, {
"t": "",
"n": 54,
"l": "         except subprocess.CalledProcessError as e:\n"
}, {
"t": "",
"n": 55,
"l": "             lines = e.output.splitlines()\n"
}, {
"t": "",
"n": 56,
"l": " \n"
}, {
"t": "",
"n": 57,
"l": "             # Output before actual execution shouldn't be relevant.\n"
}, {
"t": "",
"n": 58,
"l": "             try:\n"
}, {
"t": "",
"n": 59,
"l": "                 index = lines.index('------END_BEFORE_SOURCE')\n"
}, {
"t": "",
"n": 60,
"l": "                 lines = lines[index + 1:]\n"
}, {
"t": "",
"n": 61,
"l": "             except ValueError:\n"
}]
}, {
"blockno": 4,
"lines": [{
"t": "-",
"n": 1,
"l": "--- a/python/mozbuild/mozbuild/virtualenv.py\n"
}, {
"t": "+",
"n": 2,
"l": "+++ b/python/mozbuild/mozbuild/virtualenv.py\n"
}, {
"t": "@",
"n": 3,
"l": "@@ -113,60 +113,45 @@ class VirtualenvManager(object):\n"
}, {
"t": "",
"n": 4,
"l": "         return int(version), int(size)\n"
}, {
"t": "",
"n": 5,
"l": " \n"
}, {
"t": "",
"n": 6,
"l": "     def write_exe_info(self, python):\n"
}, {
"t": "",
"n": 7,
"l": "         \"\"\"Records the the version of the python executable that was in use when\n"
}, {
"t": "",
"n": 8,
"l": "         this virtualenv was created. We record this explicitly because\n"
}, {
"t": "",
"n": 9,
"l": "         on OS X our python path may end up being a different or modified\n"
}, {
"t": "",
"n": 10,
"l": "         executable.\n"
}, {
"t": "",
"n": 11,
"l": "         \"\"\"\n"
}, {
"t": "-",
"n": 12,
"l": "-        ver = self.python_executable_hexversion(python)\n"
}, {
"t": "+",
"n": 13,
"l": "+        ver = subprocess.check_output([python, '-c', 'import sys; print(sys.hexversion)'],\n"
}, {
"t": "+",
"n": 14,
"l": "+                                      universal_newlines=True).rstrip()\n"
}, {
"t": "",
"n": 15,
"l": "         with open(self.exe_info_path, 'w') as fh:\n"
}, {
"t": "",
"n": 16,
"l": "             fh.write(\"%s\\n\" % ver)\n"
}, {
"t": "",
"n": 17,
"l": "             fh.write(\"%s\\n\" % os.path.getsize(python))\n"
}, {
"t": "",
"n": 18,
"l": " \n"
}, {
"t": "-",
"n": 19,
"l": "-    def python_executable_hexversion(self, python):\n"
}, {
"t": "-",
"n": 20,
"l": "-        \"\"\"Run a Python executable and return its sys.hexversion value.\"\"\"\n"
}, {
"t": "-",
"n": 21,
"l": "-        program = 'import sys; print(sys.hexversion)'\n"
}, {
"t": "-",
"n": 22,
"l": "-        out = subprocess.check_output([python, '-c', program]).rstrip()\n"
}, {
"t": "-",
"n": 23,
"l": "-        return int(out)\n"
}, {
"t": "-",
"n": 24,
"l": "-\n"
}, {
"t": "-",
"n": 25,
"l": "-    def up_to_date(self, python):\n"
}, {
"t": "-",
"n": 26,
"l": "-        \"\"\"Returns whether the virtualenv is present and up to date.\n"
}, {
"t": "-",
"n": 27,
"l": "-\n"
}, {
"t": "-",
"n": 28,
"l": "-        Args:\n"
}, {
"t": "-",
"n": 29,
"l": "-            python: Full path string to the Python executable that this virtualenv\n"
}, {
"t": "-",
"n": 30,
"l": "-                should be running.  If the Python executable passed in to this\n"
}, {
"t": "-",
"n": 31,
"l": "-                argument is not the same version as the Python the virtualenv was\n"
}, {
"t": "-",
"n": 32,
"l": "-                built with then this method will return False.\n"
}, {
"t": "-",
"n": 33,
"l": "-        \"\"\"\n"
}, {
"t": "+",
"n": 34,
"l": "+    def up_to_date(self, python=sys.executable):\n"
}, {
"t": "+",
"n": 35,
"l": "+        \"\"\"Returns whether the virtualenv is present and up to date.\"\"\"\n"
}, {
"t": "",
"n": 36,
"l": " \n"
}, {
"t": "",
"n": 37,
"l": "         deps = [self.manifest_path, __file__]\n"
}, {
"t": "",
"n": 38,
"l": " \n"
}, {
"t": "",
"n": 39,
"l": "         # check if virtualenv exists\n"
}, {
"t": "",
"n": 40,
"l": "         if not os.path.exists(self.virtualenv_root) or \\\n"
}, {
"t": "",
"n": 41,
"l": "                 not os.path.exists(self.activate_path):\n"
}, {
"t": "",
"n": 42,
"l": "             return False\n"
}, {
"t": "",
"n": 43,
"l": " \n"
}, {
"t": "-",
"n": 44,
"l": "-        # Modifications to our package dependency list or to this file mean the\n"
}, {
"t": "-",
"n": 45,
"l": "-        # virtualenv should be rebuilt.\n"
}, {
"t": "+",
"n": 46,
"l": "+        # check modification times\n"
}, {
"t": "",
"n": 47,
"l": "         activate_mtime = os.path.getmtime(self.activate_path)\n"
}, {
"t": "",
"n": 48,
"l": "         dep_mtime = max(os.path.getmtime(p) for p in deps)\n"
}, {
"t": "",
"n": 49,
"l": "         if dep_mtime \u003e activate_mtime:\n"
}, {
"t": "",
"n": 50,
"l": "             return False\n"
}, {
"t": "",
"n": 51,
"l": " \n"
}, {
"t": "",
"n": 52,
"l": "         # Verify that the Python we're checking here is either the virutalenv\n"
}, {
"t": "",
"n": 53,
"l": "         # python, or we have the Python version that was used to create the\n"
}, {
"t": "",
"n": 54,
"l": "         # virtualenv. If this fails, it is likely system Python has been\n"
}, {
"t": "",
"n": 55,
"l": "         # upgraded, and our virtualenv would not be usable.\n"
}, {
"t": "-",
"n": 56,
"l": "-        orig_version, orig_size = self.get_exe_info()\n"
}, {
"t": "",
"n": 57,
"l": "         python_size = os.path.getsize(python)\n"
}, {
"t": "-",
"n": 58,
"l": "-        hexversion = self.python_executable_hexversion(python)\n"
}, {
"t": "",
"n": 59,
"l": "         if ((python, python_size) != (self.python_path, os.path.getsize(self.python_path)) and\n"
}, {
"t": "-",
"n": 60,
"l": "-                (hexversion, python_size) != (orig_version, orig_size)):\n"
}, {
"t": "+",
"n": 61,
"l": "+            (sys.hexversion, python_size) != self.get_exe_info()):\n"
}, {
"t": "",
"n": 62,
"l": "             return False\n"
}, {
"t": "",
"n": 63,
"l": " \n"
}, {
"t": "",
"n": 64,
"l": "         # recursively check sub packages.txt files\n"
}, {
"t": "",
"n": 65,
"l": "         submanifests = [i[1] for i in self.packages()\n"
}, {
"t": "",
"n": 66,
"l": "                         if i[0] == 'packages.txt']\n"
}, {
"t": "",
"n": 67,
"l": "         for submanifest in submanifests:\n"
}, {
"t": "",
"n": 68,
"l": "             submanifest = os.path.join(self.topsrcdir, submanifest)\n"
}, {
"t": "",
"n": 69,
"l": "             submanager = VirtualenvManager(self.topsrcdir,\n"
}, {
"t": "@",
"n": 70,
"l": "@@ -203,39 +188,38 @@ class VirtualenvManager(object):\n"
}, {
"t": "",
"n": 71,
"l": "         for line in proc.stdout:\n"
}, {
"t": "",
"n": 72,
"l": "             if PY2:\n"
}, {
"t": "",
"n": 73,
"l": "                 self.log_handle.write(line)\n"
}, {
"t": "",
"n": 74,
"l": "             else:\n"
}, {
"t": "",
"n": 75,
"l": "                 self.log_handle.write(line.decode('UTF-8'))\n"
}, {
"t": "",
"n": 76,
"l": " \n"
}, {
"t": "",
"n": 77,
"l": "         return proc.wait()\n"
}, {
"t": "",
"n": 78,
"l": " \n"
}, {
"t": "-",
"n": 79,
"l": "-    def create(self, python):\n"
}, {
"t": "+",
"n": 80,
"l": "+    def create(self, python=sys.executable):\n"
}, {
"t": "",
"n": 81,
"l": "         \"\"\"Create a new, empty virtualenv.\n"
}, {
"t": "",
"n": 82,
"l": " \n"
}, {
"t": "",
"n": 83,
"l": "         Receives the path to virtualenv's virtualenv.py script (which will be\n"
}, {
"t": "",
"n": 84,
"l": "         called out to), the path to create the virtualenv in, and a handle to\n"
}, {
"t": "",
"n": 85,
"l": "         write output to.\n"
}, {
"t": "",
"n": 86,
"l": "         \"\"\"\n"
}, {
"t": "+",
"n": 87,
"l": "+        env = dict(os.environ)\n"
}, {
"t": "",
"n": 88,
"l": " \n"
}, {
"t": "",
"n": 89,
"l": "         args = [python, self.virtualenv_script_path,\n"
}, {
"t": "",
"n": 90,
"l": "                 # Without this, virtualenv.py may attempt to contact the outside\n"
}, {
"t": "",
"n": 91,
"l": "                 # world and search for or download a newer version of pip,\n"
}, {
"t": "",
"n": 92,
"l": "                 # setuptools, or wheel. This is bad for security, reproducibility,\n"
}, {
"t": "",
"n": 93,
"l": "                 # and speed.\n"
}, {
"t": "",
"n": 94,
"l": "                 '--no-download',\n"
}, {
"t": "",
"n": 95,
"l": "                 self.virtualenv_root]\n"
}, {
"t": "",
"n": 96,
"l": " \n"
}, {
"t": "-",
"n": 97,
"l": "-        result = self._log_process_output(args,\n"
}, {
"t": "-",
"n": 98,
"l": "-                                          env=ensure_subprocess_env(os.environ))\n"
}, {
"t": "+",
"n": 99,
"l": "+        result = self._log_process_output(args, env=env)\n"
}, {
"t": "",
"n": 100,
"l": " \n"
}, {
"t": "",
"n": 101,
"l": "         if result:\n"
}, {
"t": "",
"n": 102,
"l": "             raise Exception(\n"
}, {
"t": "-",
"n": 103,
"l": "-                'Failed to create virtualenv: %s (virtualenv.py retcode: %s)' % (\n"
}, {
"t": "-",
"n": 104,
"l": "-                    self.virtualenv_root, result))\n"
}, {
"t": "+",
"n": 105,
"l": "+                'Failed to create virtualenv: %s' % self.virtualenv_root)\n"
}, {
"t": "",
"n": 106,
"l": " \n"
}, {
"t": "",
"n": 107,
"l": "         self.write_exe_info(python)\n"
}, {
"t": "",
"n": 108,
"l": " \n"
}, {
"t": "",
"n": 109,
"l": "         return self.virtualenv_root\n"
}, {
"t": "",
"n": 110,
"l": " \n"
}, {
"t": "",
"n": 111,
"l": "     def packages(self):\n"
}, {
"t": "",
"n": 112,
"l": "         mode = 'rU' if PY2 else 'r'\n"
}, {
"t": "",
"n": 113,
"l": "         with open(self.manifest_path, mode) as fh:\n"
}, {
"t": "@",
"n": 114,
"l": "@@ -479,37 +463,28 @@ class VirtualenvManager(object):\n"
}, {
"t": "",
"n": 115,
"l": "         except subprocess.CalledProcessError as e:\n"
}, {
"t": "",
"n": 116,
"l": "             if 'Python.h: No such file or directory' in e.output:\n"
}, {
"t": "",
"n": 117,
"l": "                 print('WARNING: Python.h not found. Install Python development headers.')\n"
}, {
"t": "",
"n": 118,
"l": "             else:\n"
}, {
"t": "",
"n": 119,
"l": "                 print(e.output)\n"
}, {
"t": "",
"n": 120,
"l": " \n"
}, {
"t": "",
"n": 121,
"l": "             raise Exception('Error installing package: %s' % directory)\n"
}, {
"t": "",
"n": 122,
"l": " \n"
}, {
"t": "-",
"n": 123,
"l": "-    def build(self, python):\n"
}, {
"t": "+",
"n": 124,
"l": "+    def build(self, python=sys.executable):\n"
}, {
"t": "",
"n": 125,
"l": "         \"\"\"Build a virtualenv per tree conventions.\n"
}, {
"t": "",
"n": 126,
"l": " \n"
}, {
"t": "",
"n": 127,
"l": "         This returns the path of the created virtualenv.\n"
}, {
"t": "",
"n": 128,
"l": "         \"\"\"\n"
}, {
"t": "",
"n": 129,
"l": " \n"
}, {
"t": "",
"n": 130,
"l": "         self.create(python)\n"
}, {
"t": "",
"n": 131,
"l": " \n"
}, {
"t": "",
"n": 132,
"l": "         # We need to populate the virtualenv using the Python executable in\n"
}, {
"t": "",
"n": 133,
"l": "         # the virtualenv for paths to be proper.\n"
}, {
"t": "",
"n": 134,
"l": " \n"
}, {
"t": "-",
"n": 135,
"l": "-        # If this module was run from Python 2 then the __file__ attribute may\n"
}, {
"t": "-",
"n": 136,
"l": "-        # point to a Python 2 .pyc file. If we are generating a Python 3\n"
}, {
"t": "-",
"n": 137,
"l": "-        # virtualenv from Python 2 make sure we call Python 3 with the path to\n"
}, {
"t": "-",
"n": 138,
"l": "-        # the module and not the Python 2 .pyc file.\n"
}, {
"t": "-",
"n": 139,
"l": "-        if os.path.splitext(__file__)[1] in ('.pyc', '.pyo'):\n"
}, {
"t": "-",
"n": 140,
"l": "-            thismodule = __file__[:-1]\n"
}, {
"t": "-",
"n": 141,
"l": "-        else:\n"
}, {
"t": "-",
"n": 142,
"l": "-            thismodule = __file__\n"
}, {
"t": "-",
"n": 143,
"l": "-\n"
}, {
"t": "-",
"n": 144,
"l": "-        args = [self.python_path, thismodule, 'populate', self.topsrcdir,\n"
}, {
"t": "+",
"n": 145,
"l": "+        args = [self.python_path, __file__, 'populate', self.topsrcdir,\n"
}, {
"t": "",
"n": 146,
"l": "                 self.topobjdir, self.virtualenv_root, self.manifest_path]\n"
}, {
"t": "",
"n": 147,
"l": " \n"
}, {
"t": "",
"n": 148,
"l": "         result = self._log_process_output(args, cwd=self.topsrcdir)\n"
}, {
"t": "",
"n": 149,
"l": " \n"
}, {
"t": "",
"n": 150,
"l": "         if result != 0:\n"
}, {
"t": "",
"n": 151,
"l": "             raise Exception('Error populating virtualenv.')\n"
}, {
"t": "",
"n": 152,
"l": " \n"
}, {
"t": "",
"n": 153,
"l": "         os.utime(self.activate_path, None)\n"
}]
}],
"phase": "public",
"pushid": 36878,
"pushdate": [1575396433, 0],
"pushuser": "archaeopteryx@coole-files.de",
"landingsystem": null
}
